{"version":3,"sources":["app.drag-drop.service.js","app.drag-drop.directive.js","app.js"],"names":["DragDropService","$timeout","$log","$window","$document","$rootScope","DRAG_EVENTS","DataFactory","onModelChange","value","self","first_load","options","update","toTitleCase","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","getSuffix","_str","suffix","substring","indexOf","onDataRendered","this","sortBy","inUse","storage","active","properties","isHandle","firstLoad","hasDragHandle","cols","destItem","sourceItem","destIndex","sourceIndex","setColumns","el","children","addClass","current","classList","contains","add","handleDragOver","e","currentTarget","preventDefault","dataTransfer","dropEffect","handleDragLeave","remove","handleDragEnter","handleDragEnd","forEach","call","col","onModelRender","scope","attrs","ngModel","$watch","handleDrop","stopPropagation","info","updateModel","dragIndex","index","dragModel","model","dropIndex","dropModel","_model","models","draggedItemCopy","angular","copy","$modelValue","unregister","splice","onEnd","$emit","$viewValue","handle","updateHandles","setAttribute","register","activeHandle","handles","querySelectorAll","length","element","isObject","unbind","bind","handleDragStart","effectAllowed","currentBrowser","setData","eventsProcessor","removeAttribute","action","i","events","prototype","browser_agent","navigator","userAgent","getInstance","ngHtmlDragDrop","$parse","link","onDataChange","dd","DragDropServiceInstance","Object","keys","extend","isDefined","construct","elem","$on","$event","data","$apply","$render","restrict","require","module","service","$inject","directive"],"mappings":"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","file":"angular-drag-drop.min.js","sourcesContent":["'use strict';\r\n\r\n/**\r\n * @ngdoc service\r\n * @name DragDropService\r\n *\r\n * @requires $timeout\r\n *\r\n * @module angular-html-drag-drop\r\n *\r\n * @description\r\n * Directive that constructs the tree grid\r\n */\r\nangular\r\n  .module('angular-html-drag-drop')\r\n  .service('DragDropService', DragDropService);\r\n\r\nDragDropService.$inject = [\r\n  '$timeout',\r\n  '$log',\r\n  '$window',\r\n  '$document',\r\n  '$rootScope'\r\n];\r\n\r\nfunction DragDropService($timeout, $log, $window, $document, $rootScope) {\r\n\r\n  // {jshint} complains about possible strict violation\r\n  // adding this line below skips the validation \r\n  /*jshint validthis: true */\r\n\r\n  // adding this line below skips dot notation validation\r\n  /*jshint sub:true*/\r\n  var DRAG_EVENTS = [\r\n      'drop'\r\n    , 'dragstart'\r\n    , 'dragenter'\r\n    , 'dragover'\r\n    , 'dragleave'\r\n    , 'dragend'\r\n  ]\r\n\r\n  // data factory that holds the data for each instance\r\n  , DataFactory = function() {\r\n    var self = this;\r\n\r\n    this.options = {\r\n      'sortBy': null,\r\n      'inUse': false,\r\n      'storage': null,\r\n      'active': false,\r\n      'replace': false,\r\n      'properties': {},\r\n      'isHandle': false,\r\n      'firstLoad': false,\r\n      'hasDragHandle': false\r\n    };\r\n\r\n    this.cols = [];\r\n    this.destItem = {};\r\n    this.sourceItem = {};\r\n    this.destIndex = null;\r\n    this.sourceIndex = null;\r\n\r\n\r\n    function onModelChange(value) {\r\n      if (!self.first_load ||\r\n        self.options == 'destroy') {\r\n        return;\r\n      }\r\n\r\n      $timeout(function() {\r\n        self.update();\r\n      });\r\n    }\r\n\r\n    function toTitleCase(str) {\r\n      return str.replace(/\\w\\S*/g, function(txt) {\r\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n      });\r\n    }\r\n\r\n    function getSuffix(str) {\r\n      var _str = toTitleCase(str)\r\n      , suffix = _str.substring(_str.indexOf(\"g\") + 1);\r\n      return _str.replace(suffix, toTitleCase(suffix));\r\n    }\r\n\r\n    function onDataRendered() {\r\n      // init flag indicate the first load sortable is done or not\r\n      self.first_load = false;\r\n    }\r\n\r\n    /**\r\n     * @name: setColumns\r\n     * @methodOf: DragDropService\r\n     *\r\n     * @param {el} parent element\r\n     *\r\n     * @description\r\n     * sets list of elements to make them draggable\r\n     */\r\n    this.setColumns = function(el) {\r\n      if (!el && !!!el[0]) return;\r\n\r\n      self.cols = el[0].children;\r\n    };\r\n\r\n\r\n    this.addClass = function(current) {\r\n      if (!current.classList.contains('over')) {\r\n        current.classList.add('over');\r\n      }\r\n    };\r\n\r\n    /**\r\n     * @name: handleDragOver\r\n     * @methodOf: DragDropService\r\n     *\r\n     * @param {e} triggered event\r\n     *\r\n     * @description\r\n     * executed on element drag over.\r\n     */\r\n    this.handleDragOver = function(e) {\r\n      var current = e.currentTarget;\r\n\r\n      // allows us to drop\r\n      if (e.preventDefault) {\r\n        e.preventDefault();\r\n      }\r\n      e.dataTransfer.dropEffect = 'move';\r\n      self.addClass(current);\r\n    };\r\n\r\n    /**\r\n     * @name: handleDragLeave\r\n     * @methodOf: DragDropService\r\n     *\r\n     * @param {e} triggered event\r\n     *\r\n     * @description\r\n     * executed on element drag leave.\r\n     */\r\n    this.handleDragLeave = function(e) {\r\n      e.currentTarget.classList.remove('over');\r\n    };\r\n\r\n    /**\r\n     * @name: handleDragEnter\r\n     * @methodOf: DragDropService\r\n     *\r\n     * @param {e} triggered event\r\n     *\r\n     * @description\r\n     * executed on element drag enter.\r\n     */\r\n    this.handleDragEnter = function(e) {\r\n      var current = e.currentTarget;\r\n      self.addClass(current);\r\n    };\r\n\r\n    /**\r\n     * @name: handleDragEnd\r\n     * @methodOf: DragDropService\r\n     *\r\n     * @param {e} triggered event\r\n     *\r\n     * @description\r\n     * executed on element drag end.\r\n     */\r\n    this.handleDragEnd = function(e) {\r\n      [].forEach.call(self.cols, function(col) {\r\n        col.classList.remove('over');\r\n        col.classList.remove('moving');\r\n      });\r\n    };\r\n\r\n    /**\r\n     * @name: onModelRender\r\n     * @methodOf: DragDropService\r\n     *\r\n     * @param {e} triggered event\r\n     *\r\n     * @description\r\n     * executed on element drag end.\r\n     */\r\n    this.onModelRender = function(scope, el, attrs, ngModel) {\r\n      $timeout(onDataRendered, true);\r\n\r\n      //Watch ngModel and narrate it\r\n      scope.$watch('ngModel', onModelChange, true);\r\n    };\r\n\r\n    /**\r\n     * @name: handleDrop\r\n     * @methodOf: DataService\r\n     *\r\n     * @param {Object | e} triggered event\r\n     *\r\n     * @description\r\n     * triggered when dragging activity is completed\r\n     */\r\n    this.handleDrop = function(e) {\r\n      self.destItem = e.currentTarget;\r\n\r\n      // this/e.target is current target element.\r\n      // stops the browser from redirecting.\r\n      if (e.stopPropagation) {\r\n        e.stopPropagation();\r\n      }\r\n      e.preventDefault();\r\n      self.destItem.classList.remove('over');\r\n\r\n      // don't do anything if we're dropping on the same column we're dragging.\r\n      if (self.sourceItem != self.destItem) {\r\n        if (self.sourceItem === null) {\r\n          $log.info(\"Invalid sortable\");\r\n          return;\r\n        }\r\n        self.updateModel();\r\n      }\r\n      return false;\r\n    };\r\n\r\n    /**\r\n     * @name: updateModel\r\n     * @methodOf: DataService\r\n     *\r\n     * @description\r\n     * rearranges model data on drag end\r\n     */\r\n    this.updateModel = function() {\r\n      var dragIndex = self.sourceItem.index\r\n      , dragModel = self.sourceItem.model\r\n      , dropIndex = self.destItem.index\r\n      , dropModel = self.destItem.model\r\n      , _model = self.options.properties.models || {}\r\n      , draggedItemCopy = angular.copy(_model.$modelValue[dragIndex]);\r\n\r\n      if (_model.$modelValue.indexOf(dragModel) != -1) {\r\n        self.unregister();\r\n        if (self.options.replace) {\r\n          _model.$modelValue[dragIndex] = dropModel;\r\n          _model.$modelValue[dropIndex] = dragModel;\r\n        } else {\r\n          _model.$modelValue.splice(dragIndex, 1);\r\n          _model.$modelValue.splice(dropIndex, 0, draggedItemCopy);\r\n        }\r\n      } else {\r\n        $log.info(\"Invalid action\");\r\n        return;\r\n      }\r\n\r\n      // emits draggableEnd event when dragging activing is completed\r\n      self.onEnd = $rootScope.$emit(\"draggableEnd\", {\r\n        model: _model,\r\n        dropIndex: dropIndex,\r\n        dragModel: dragModel,\r\n        dropModel: _model.$viewValue[dropIndex],\r\n        dragIndex: dragIndex\r\n      });\r\n    };\r\n\r\n    /**\r\n     * @name: update\r\n     * @methodOf: DataService\r\n     *\r\n     * @description\r\n     * registers elements to drag & drop events\r\n     * attaches index & data model to each element children\r\n     */\r\n    this.update = function() {\r\n      self.sourceItem = null;\r\n\r\n      var index = 0\r\n      , _model = self.options.properties.models || {};\r\n      self.cols = self.cols || [];\r\n\r\n      // iterate over list of draggable element\r\n      [].forEach.call(self.cols, function(col) {\r\n        if (self.options && self.options.handle) {\r\n          self.updateHandles();\r\n        }\r\n\r\n        // set index on each element to consume it \r\n        // in re-arraging the elements based on the src & dest indexes\r\n        col.index = index;\r\n\r\n        // attach model to the element to be consumed on drag end\r\n        col.model = _model.$modelValue[index];\r\n        index++;\r\n\r\n        // make columns draggable\r\n        col.setAttribute('draggable', 'true');\r\n\r\n        // register to drag & drop events\r\n        self.register(col);\r\n      });\r\n      self.options.isHandle = true;\r\n      $log.info(\"Update sortable:\");\r\n    };\r\n\r\n    /**\r\n     * @name: activeHandle\r\n     * @methodOf: DataService\r\n     *\r\n     * @description\r\n     * activates handle on when mouseup on the element\r\n     */\r\n    this.activeHandle = function() {\r\n      self.options.isHandle = true;\r\n    };\r\n\r\n    /**\r\n     * @name: updateHandles\r\n     * @methodOf: DataService\r\n     *\r\n     * @description\r\n     * updates drag and drop handles on child elements\r\n     */\r\n    this.updateHandles = function() {\r\n      // find list of element with handles\r\n      var handles = $document[0].querySelectorAll(self.options.handle);\r\n      // if there's a list of elements found\r\n      // bind mousedown event to each element\r\n      if (handles && handles.length) {\r\n        [].forEach.call(handles, function(handle) {\r\n          var el = angular.element(handle);\r\n\r\n          // if element is not empty, bind event to it\r\n          // remove previously bound events if any\r\n          if (angular.isObject(el)) {\r\n            el.unbind('mousedown', self.activeHandle);\r\n            el.bind('mousedown', self.activeHandle);\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * @name: handleDragStart\r\n     * @methodOf: DataService\r\n     *\r\n     * @param {Object | e} triggered event\r\n     *\r\n     * @description\r\n     * triggered when element is dragged\r\n     */\r\n    this.handleDragStart = function(e) {\r\n      var current = e.currentTarget;\r\n\r\n      // reset sourceItem on drag start\r\n      self.sourceItem = null;\r\n      if (self.options && !self.options.isHandle && self.options.handle) {\r\n        e.preventDefault();\r\n        return;\r\n      }\r\n\r\n      self.options.isHandle = false;\r\n      e.dataTransfer.effectAllowed = 'move';\r\n\r\n      // fixed on firefox and IE 11\r\n      if (self.currentBrowser != \"IE\") {\r\n        e.dataTransfer.setData('text/plain', 'anything');\r\n      }\r\n      self.sourceItem = current;\r\n\r\n      // this/e.target is the source node.\r\n      current.classList.add('moving');\r\n    };\r\n\r\n    /**\r\n     * @name: register\r\n     * @methodOf: DataService\r\n     *\r\n     * @description\r\n     * binds drag & drop events to the element\r\n     */\r\n    this.register = function(el) {\r\n      self.eventsProcessor(el, 'addEventListener');\r\n    };\r\n\r\n    /**\r\n     * @name: unregister\r\n     * @methodOf: DataService\r\n     *\r\n     * @description\r\n     * unbinds/removes drag & drop events from the element\r\n     */\r\n    this.unregister = function() {\r\n      self.options.isHandle = false;\r\n\r\n      [].forEach.call(self.cols, function(col) {\r\n        col.removeAttribute('draggable');\r\n        self.eventsProcessor(col, 'removeEventListener');\r\n      });\r\n    };\r\n\r\n    /**\r\n     * @name: eventsProcessor\r\n     * @methodOf: DataService\r\n     *\r\n     * @param {el} element to bind events to\r\n     * @param {action | addEventListener| removeEventListener} \r\n     *\r\n     * @description\r\n     * helper function to perform add or remove event listeners\r\n     */\r\n    this.eventsProcessor = function(el, action) {\r\n      for (var i = 0; i < self.events.length; i++) {\r\n        el[action](self.events[i], self[\"handle\" \r\n        +  getSuffix(self.events[i])], false);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @name: events\r\n   *\r\n   * @description\r\n   * list of drag & drop events\r\n   */\r\n  DataFactory.prototype.events = DRAG_EVENTS;\r\n\r\n  /**\r\n   * @name: currentBrowser\r\n   * @methodOf: DataService\r\n   *\r\n   * @description\r\n   * detects the current browser\r\n   * currently used to avoid drag & drop issues on IE\r\n   */\r\n  DataFactory.prototype.currentBrowser = function() {\r\n    var result, browser_agent = $window.navigator.userAgent;\r\n\r\n    if (browser_agent.indexOf(\".NET\") != -1) {\r\n      result = \"IE\";\r\n    } else if (browser_agent.indexOf(\"Firefox\") != -1) {\r\n      result = \"Firefox\";\r\n    } else {\r\n      result = \"Chrome\";\r\n    }\r\n    return result;\r\n  };\r\n\r\n  return {\r\n    getInstance: function() {\r\n      return new DataFactory();\r\n    }\r\n  };\r\n}","'use strict';\r\n\r\nangular\r\n  .module('angular-html-drag-drop')\r\n  .directive('ngHtmlDragDrop', ngHtmlDragDrop);\r\n\r\nngHtmlDragDrop.$inject = [\r\n    \"$parse\"\r\n  , \"$timeout\"\r\n  , \"$log\"\r\n  , \"$window\"\r\n  , \"DragDropService\"\r\n  , \"$rootScope\"\r\n];\r\n\r\nfunction ngHtmlDragDrop($parse, $timeout, $log,\r\n  $window, DragDropService, $rootScope) {\r\n\r\n  return {\r\n    restrict: 'A',\r\n    require: '?ngModel',\r\n    scope: {\r\n      ngHtmlDragDrop: '='\r\n    },\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, ngModel) {\r\n    var DragDropServiceInstance = DragDropServiceInstance || DragDropService.getInstance();\r\n\r\n    DragDropServiceInstance.setColumns(element);\r\n    DragDropServiceInstance.options.inUse = false;\r\n    DragDropServiceInstance.options.isHandle = false;\r\n\r\n    DragDropServiceInstance.options.properties = {\r\n      scope: scope,\r\n      attrs: attrs,\r\n      elem: element,\r\n      models: ngModel\r\n    };\r\n\r\n    $rootScope.$on(\"draggableEnd\",\r\n      function($event, data) {\r\n        scope.$apply();\r\n        DragDropServiceInstance.update();\r\n      }\r\n    );\r\n\r\n    if (ngModel) {\r\n      ngModel.$render = DragDropServiceInstance\r\n        .onModelRender.bind(this, scope, element, attrs, ngModel);\r\n    } else {\r\n      $log.info('Missing ng-model in template');\r\n    }\r\n\r\n    scope.$watch(\"ngHtmlDragDrop\", onDataChange, true);\r\n\r\n    function onDataChange(value) {\r\n      var dd = DragDropServiceInstance;\r\n\r\n      if (value && Object.keys(value).length > 0) {\r\n        DragDropServiceInstance.options = angular.extend(dd.options,\r\n          angular.copy(value)\r\n        );\r\n      }\r\n\r\n      if (value == \"destroy\") {\r\n        if (dd.options.isHandle) {\r\n          DragDropServiceInstance.options.isHandle = false;\r\n          DragDropServiceInstance.unregister();\r\n        }\r\n        return;\r\n      }\r\n\r\n      DragDropServiceInstance.options = dd.options || {};\r\n\r\n      if (angular.isDefined(scope.ngHtmlDragDrop.construct)) {\r\n        scope.ngHtmlDragDrop.construct(ngModel.$modelValue);\r\n      }\r\n\r\n      element[0].classList.add('widgets-sortable');\r\n      DragDropServiceInstance.update();\r\n      $timeout(function() {\r\n        DragDropServiceInstance.first_load = true;\r\n      });\r\n    }\r\n  }\r\n}","'use strict';\r\n\r\n angular.module('angular-html-drag-drop', []);"]}